# SPDX-License-Identifier: MIT

name: DISTRO Core Build

run-name: ${{ github.workflow }} for ${{ github.repository }}

# This workflow represents a specific configuration for a
# single MACHINE as a specific design goal. It utilizes a
# reusable workflow found at distro-core.

# Variables and Actions
# secrets.AWS_ACCESS_KEY_ID                 Organization, S3 Access Key
# secrets.AWS_SECRET_ACCESS_KEY             Organization, S3 Secret Key
# secrets.AWS_ENDPOINT_URL                  Organization, S3 Endpoint Hostname
# vars.DISTRO                               Organization, Bitbake DISTRO
# vars.DISTRO_CODENAME                      Organization, Bitbake DISTRO_CODENAME
# vars.MACHINE                              Repository, Bitbake MACHINE
# vars.TARGETS                              Organization, Bitbake TARGETS

# Self hosted runners have the prerequsite dependency to
# install the host tools dependencies before workflow use.

on:
  workflow_dispatch:
    inputs:
      runs-on:
        description: Select runner
        type: choice
        options:
        - self-hosted
        - ubuntu-22.04
        - ubuntu-24.04
        - distro-core-small
      flag_dry_run:
        description: --dry-run
        type: boolean
        default: false
      flag_continue:
        description: --continue
        type: boolean
        default: false
      flag_parse_only:
        description: --parse-only
        type: boolean
        default: false
      flag_no_setscene:
        description: --no-setscene
        type: boolean
        default: false
      # cve-check
      extra_inherit:
        description: Extra INHERIT class
        type: choice
        options:
        - buildstats
        - buildstats cve-check

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'release/') }}

# workflow permissions for current repository

permissions:
  actions: write
  attestations: write
  contents: write
  id-token: write

########################################################################

jobs:

  Run:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: 1080
    steps:

    # setup runner.

    - id: runner
      if: vars.DISTRO != '' && vars.MACHINE != ''
      uses: distro-core/distro-core-action-runner@v0
      with:
        MNT_DL_DIR: /mnt/downloads
        MNT_SSTATE_DIR: /mnt/sstate-cache

      # checkout repo for workflow automation.

    - id: checkout
      uses: actions/checkout@v4
      with:
        clean: false
        fetch-depth: 0

    # keep-alive prevents the workflow from being disabled due to any
    # github repository inactivity.

    - id: keepalive
      uses: liskin/gh-workflow-keepalive@v1.2.1

    # contexts reports in the summary log contents of contexts.

    - id: context
      uses: distro-core/distro-core-action-context@v0

    # remove the workspace contents; self-hosted runners retain the
    # workspace artifacts between workflow executions. self-hosted
    # runners return name as label in outputs.

    - id: pre-cleanup
      if: always() && steps.runner.outputs.runner-environment == 'self-hosted'
      uses: distro-core/distro-core-action-cleanup@v0
      with:
        paths: |
          .repo/local_manifests
          build/${{ vars.DISTRO }}/*.{log,lock,sock}
          build/${{ vars.DISTRO }}/conf/{.*,*}

    # repo init, sync and manifest; the job creates the workspace
    # contents and the .repo directory that are referenced in later.

    # - id: local-manifests
    #   shell: bash
    #   run: |
    #     : repo-local-manifests
    #     install -d .repo/local_manifests
    #     cat <<EOF >.repo/local_manifests/local-manifest.xml
    #     <?xml version="1.0" encoding="UTF-8"?>
    #     <manifest>
    #     EOF
    #     for project in $projects ; do
    #     cat <<EOF >>.repo/local_manifests/local-manifest.xml
    #     <extend-project name="$project" revision="$revision" upstream="$revision"/>
    #     EOF
    #     done
    #     cat <<EOF >>.repo/local_manifests/local-manifest.xml
    #     </manifest>
    #     EOF

    - id: local-manifest-scarthgap-sbc-xavier-nx-devkit
      if: vars.DISTRO_CODENAME == 'scarthgap' && vars.MACHINE == 'sbc-xavier-nx-devkit'
      shell: bash
      run: |
        : repo-local-manifests
        install -d .repo/local_manifests
        cat <<EOF >.repo/local_manifests/local-manifest-scarthgap-meta-tegra.xml
        <?xml version="1.0" encoding="UTF-8"?>
        <manifest>
        <extend-project name="meta-tegra" revision="scarthgap-l4t-r35.x" upstream="scarthgap-l4t-r35.x"/>
        </manifest>
        EOF

    - uses: distro-core/distro-core-action-repo@v0
      with:
        MANIFEST_URL: https://github.com/distro-core/distro-manifest.git
        MANIFEST_NAME: distro-head-${{ vars.DISTRO_CODENAME }}.xml
        MANIFEST_REF: main

    # restore caches.

    - id: restore-cache-bitbake-cache
      if: always()
      uses: actions/cache/restore@v4
      with:
        key: cache-bitbake-cache
        path: |
          build/cache

    - id: restore-cache-bitbake-downloads
      if: steps.runner.outputs.runner-environment == 'github-hosted'
      uses: actions/cache/restore@v4
      with:
        key: cache-bitbake-downloads
        path: |
          build/downloads

    - id: restore-cache-bitbake-sstate
      if: steps.runner.outputs.runner-environment == 'github-hosted'
      uses: actions/cache/restore@v4
      with:
        key: cache-bitbake-sstate
        path: |
          build/sstate-cache

    # build steps to create artifacts.

    # - id: bitbake-clean
    #   uses: distro-core/distro-core-action-bitbake@v0
    #   env:
    #     DISTRO: ${{ vars.DISTRO }}
    #     MACHINE: ${{ vars.MACHINE }}
    #     TARGETS: ${{ vars.TARGETS }}
    #     TARGET_FLAGS: --cmd cleansstate
    #     EXTRA_INHERIT_CLASSES: ${{ inputs.extra_inherit }}

    # - id: bitbake-before
    #   uses: distro-core/distro-core-action-bitbake@v0
    #   env:
    #     DISTRO: ${{ vars.DISTRO }}
    #     MACHINE: ${{ vars.MACHINE }}
    #     TARGETS: ${{ vars.TARGETS }}
    #     TARGET_FLAGS: webkitgtk webkitgtk3
    #     EXTRA_INHERIT_CLASSES: ${{ inputs.extra_inherit }}

    # - id: bitbake-sdk
    #   uses: distro-core/distro-core-action-bitbake@v0
    #   env:
    #     DISTRO: ${{ vars.DISTRO }}
    #     MACHINE: ${{ vars.MACHINE }}
    #     TARGETS: ${{ vars.TARGETS }}
    #     TARGET_FLAGS: --cmd populate_sdk
    #     EXTRA_INHERIT_CLASSES: ${{ inputs.extra_inherit }}

    - id: bitbake-targets
      uses: distro-core/distro-core-action-bitbake@v0
      env:
        DISTRO: ${{ vars.DISTRO }}
        MACHINE: ${{ vars.MACHINE }}
        TARGETS: ${{ vars.TARGETS }}
        TARGET_FLAGS: ''
        EXTRA_INHERIT_CLASSES: ${{ inputs.extra_inherit }}
      with:
        FLAG_DRY_RUN: ${{ inputs.flag_dry_run && inputs.flag_dry_run || false }}
        FLAG_CONTINUE: ${{ inputs.flag_continue && inputs.flag_continue || false }}
        FLAG_PARSE_ONLY: ${{ inputs.flag_parse_only && inputs.flag_parse_only || false }}
        FLAG_NO_SETSCENE: ${{ inputs.flag_no_setscene && inputs.flag_no_setscene || false }}

    # Artifacts attestation

    # - id: attest
    #   uses: actions/attest-build-provenance@v2
    #   with:
    #     subject-checksums: ${{ steps.bitbake-targets.outputs.deploy_dir }}

    # sync artifacts to S3 storage.

    - id: s3sync-dl-dir
      if: steps.bitbake-targets.outputs.dl_dir != ''
      uses: distro-core/distro-core-action-s3sync@v0
      env:
        SRC_DIR: ${{ steps.bitbake-targets.outputs.dl_dir }}
        DST_DIR: s3://distro-core-downloads
      with:
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - id: s3sync-sstate-dir
      if: steps.bitbake-targets.outputs.sstate_dir != ''
      uses: distro-core/distro-core-action-s3sync@v0
      env:
        SRC_DIR: ${{ steps.bitbake-targets.outputs.sstate_dir }}
        DST_DIR: s3://distro-core-sstate-cache
      with:
        AWS_ENDPOINT_URL: ${{ secrets.AWS_ENDPOINT_URL }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # sync shared artifacts to local storage

    - id: rsync-dl-dir
      if: steps.runner.outputs.runner-environment == 'self-hosted' && steps.bitbake-targets.outputs.dl_dir != '' && steps.runner.outputs.mnt_dl_dir != ''
      uses: distro-core/distro-core-action-rsync@v0
      env:
        SRC_DIR: ${{ steps.bitbake-targets.outputs.dl_dir }}
        DST_DIR: ${{ steps.runner.outputs.mnt_dl_dir }}

    - id: rsync-sstate-dir
      if: steps.runner.outputs.runner-environment == 'self-hosted' && steps.bitbake-targets.outputs.sstate_dir != '' && steps.runner.outputs.mnt_sstate_dir != ''
      uses: distro-core/distro-core-action-rsync@v0
      env:
        SRC_DIR: ${{ steps.bitbake-targets.outputs.sstate_dir }}
        DST_DIR: ${{ steps.runner.outputs.mnt_sstate_dir }}

    # refresh caches.

    # - id: gh-cli
    #   if: steps.runner.outputs.runner-environment == 'github-hosted'
    #   shell: bash
    #   env:
    #     NO_COLOR: 1
    #     GH_PROMPT_DISABLED: 1
    #     GH_NO_UPDATE_NOTIFIER: 1
    #     GH_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
    #   run: |
    #     : gh cli
    #     # gh run list --json databaseId -q '.[].databaseId' -w codeql --limit 500 |
    #     #   xargs -IID -P 15 echo gh api \
    #     #   "repos/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions/runs/ID" \
    #     #   -X DELETE
    #     : cache usage
    #     gh cache list
    #     gh cache delete ${{ steps.restore-cache-bitbake-cache.outputs.cache-primary-key }} || true
    #     gh cache delete ${{ steps.restore-cache-bitbake-downloads.outputs.cache-primary-key }} || true
    #     gh cache delete ${{ steps.restore-cache-bitbake-sstate.outputs.cache-primary-key }} || true

    - id: save-cache-bitbake-downloads
      if: steps.runner.outputs.runner-environment == 'github-hosted' && steps.bitbake-targets.conclusion == 'success'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.restore-cache-bitbake-downloads.outputs.cache-primary-key }}
        path: |
          build/downloads/*
          !build/downloads/git2
          !build/downloads/*.done
          !build/downloads/*.lock
          !build/downloads/*tmp
          !build/downloads/tmp*

    - id: save-cache-bitbake-sstate
      if: steps.runner.outputs.runner-environment == 'github-hosted' && steps.bitbake-targets.conclusion == 'success'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.restore-cache-bitbake-sstate.outputs.cache-primary-key }}
        path: |
          build/sstate-cache

    - id: save-cache-bitbake-cache
      if: steps.bitbake-targets.conclusion == 'success'
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.restore-cache-bitbake-cache.outputs.cache-primary-key }}
        path: |
          build/cache

    # remove the workspace contents; self-hosted runners retain the
    # workspace artifacts between workflow executions.

    - id: post-cleanup
      if: success() && steps.runner.outputs.runner-environment == 'self-hosted'
      uses: distro-core/distro-core-action-cleanup@v0
      with:
        paths: |
          .repo/local_manifests
          build/${{ vars.DISTRO }}/*.{log,lock,sock}
          build/${{ vars.DISTRO }}/conf/{.*,*}
